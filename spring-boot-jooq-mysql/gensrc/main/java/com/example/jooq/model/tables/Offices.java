/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.model.tables;


import com.example.jooq.model.Classicmodels;
import com.example.jooq.model.Indexes;
import com.example.jooq.model.Keys;
import com.example.jooq.model.tables.records.OfficesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offices extends TableImpl<OfficesRecord> {

    private static final long serialVersionUID = -752572526;

    /**
     * The reference instance of <code>classicmodels.offices</code>
     */
    public static final Offices OFFICES = new Offices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficesRecord> getRecordType() {
        return OfficesRecord.class;
    }

    /**
     * The column <code>classicmodels.offices.officeCode</code>.
     */
    public final TableField<OfficesRecord, String> OFFICECODE = createField(DSL.name("officeCode"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.city</code>.
     */
    public final TableField<OfficesRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.phone</code>.
     */
    public final TableField<OfficesRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.addressLine1</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESSLINE1 = createField(DSL.name("addressLine1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.addressLine2</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESSLINE2 = createField(DSL.name("addressLine2"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>classicmodels.offices.state</code>.
     */
    public final TableField<OfficesRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>classicmodels.offices.country</code>.
     */
    public final TableField<OfficesRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.postalCode</code>.
     */
    public final TableField<OfficesRecord, String> POSTALCODE = createField(DSL.name("postalCode"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.territory</code>.
     */
    public final TableField<OfficesRecord, String> TERRITORY = createField(DSL.name("territory"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>classicmodels.offices</code> table reference
     */
    public Offices() {
        this(DSL.name("offices"), null);
    }

    /**
     * Create an aliased <code>classicmodels.offices</code> table reference
     */
    public Offices(String alias) {
        this(DSL.name(alias), OFFICES);
    }

    /**
     * Create an aliased <code>classicmodels.offices</code> table reference
     */
    public Offices(Name alias) {
        this(alias, OFFICES);
    }

    private Offices(Name alias, Table<OfficesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offices(Name alias, Table<OfficesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Offices(Table<O> child, ForeignKey<O, OfficesRecord> key) {
        super(child, key, OFFICES);
    }

    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OFFICES_PRIMARY);
    }

    @Override
    public UniqueKey<OfficesRecord> getPrimaryKey() {
        return Keys.KEY_OFFICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<OfficesRecord>> getKeys() {
        return Arrays.<UniqueKey<OfficesRecord>>asList(Keys.KEY_OFFICES_PRIMARY);
    }

    @Override
    public Offices as(String alias) {
        return new Offices(DSL.name(alias), this);
    }

    @Override
    public Offices as(Name alias) {
        return new Offices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offices rename(String name) {
        return new Offices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offices rename(Name name) {
        return new Offices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}

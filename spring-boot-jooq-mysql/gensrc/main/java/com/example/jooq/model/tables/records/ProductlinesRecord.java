/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.model.tables.records;


import com.example.jooq.model.tables.Productlines;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductlinesRecord extends UpdatableRecordImpl<ProductlinesRecord> implements Record4<String, String, String, byte[]> {

    private static final long serialVersionUID = 1436135055;

    /**
     * Setter for <code>classicmodels.productlines.productLine</code>.
     */
    public void setProductline(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>classicmodels.productlines.productLine</code>.
     */
    public String getProductline() {
        return (String) get(0);
    }

    /**
     * Setter for <code>classicmodels.productlines.textDescription</code>.
     */
    public void setTextdescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>classicmodels.productlines.textDescription</code>.
     */
    public String getTextdescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>classicmodels.productlines.htmlDescription</code>.
     */
    public void setHtmldescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>classicmodels.productlines.htmlDescription</code>.
     */
    public String getHtmldescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>classicmodels.productlines.image</code>.
     */
    public void setImage(byte... value) {
        set(3, value);
    }

    /**
     * Getter for <code>classicmodels.productlines.image</code>.
     */
    public byte[] getImage() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Productlines.PRODUCTLINES.PRODUCTLINE;
    }

    @Override
    public Field<String> field2() {
        return Productlines.PRODUCTLINES.TEXTDESCRIPTION;
    }

    @Override
    public Field<String> field3() {
        return Productlines.PRODUCTLINES.HTMLDESCRIPTION;
    }

    @Override
    public Field<byte[]> field4() {
        return Productlines.PRODUCTLINES.IMAGE;
    }

    @Override
    public String component1() {
        return getProductline();
    }

    @Override
    public String component2() {
        return getTextdescription();
    }

    @Override
    public String component3() {
        return getHtmldescription();
    }

    @Override
    public byte[] component4() {
        return getImage();
    }

    @Override
    public String value1() {
        return getProductline();
    }

    @Override
    public String value2() {
        return getTextdescription();
    }

    @Override
    public String value3() {
        return getHtmldescription();
    }

    @Override
    public byte[] value4() {
        return getImage();
    }

    @Override
    public ProductlinesRecord value1(String value) {
        setProductline(value);
        return this;
    }

    @Override
    public ProductlinesRecord value2(String value) {
        setTextdescription(value);
        return this;
    }

    @Override
    public ProductlinesRecord value3(String value) {
        setHtmldescription(value);
        return this;
    }

    @Override
    public ProductlinesRecord value4(byte... value) {
        setImage(value);
        return this;
    }

    @Override
    public ProductlinesRecord values(String value1, String value2, String value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductlinesRecord
     */
    public ProductlinesRecord() {
        super(Productlines.PRODUCTLINES);
    }

    /**
     * Create a detached, initialised ProductlinesRecord
     */
    public ProductlinesRecord(String productline, String textdescription, String htmldescription, byte[] image) {
        super(Productlines.PRODUCTLINES);

        set(0, productline);
        set(1, textdescription);
        set(2, htmldescription);
        set(3, image);
    }
}
